#include <iostream>
#include <fstream>
#include <memory>
#include <string>
#include <Windows.h>

// Copied from MVCI.exe
unsigned char decrypt_dfp_info_data[1329] =
{
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48,
	0x89, 0x7C, 0x24, 0x20, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x33, 0xC0, 0x48, 0x89,
	0x11, 0x4C, 0x89, 0x41, 0x08, 0x44, 0x0F, 0xB7, 0x8A, 0x88, 0x01, 0x00, 0x00, 0x4D, 0x8B, 0xE8,
	0x48, 0x8B, 0xEA, 0x4C, 0x8B, 0xF9, 0x4C, 0x8D, 0xB2, 0x9E, 0x01, 0x00, 0x00, 0x44, 0x8B, 0xD8,
	0x4C, 0x89, 0x49, 0x10, 0x4D, 0x85, 0xC9, 0x74, 0x30, 0x4D, 0x8B, 0xC6, 0x49, 0x8B, 0xD6, 0x49,
	0xF7, 0xD8, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0xB6, 0x0A, 0x48, 0x8D, 0x52, 0x01, 0x44, 0x03, 0xD9, 0x45, 0x03, 0xDB, 0x44, 0x33, 0xD9,
	0x49, 0x8D, 0x0C, 0x10, 0x49, 0x3B, 0xC9, 0x72, 0xE7, 0x0F, 0xB6, 0x8D, 0x8A, 0x01, 0x00, 0x00,
	0x0F, 0xB6, 0x95, 0x8B, 0x01, 0x00, 0x00, 0x44, 0x0F, 0xB6, 0x85, 0x8C, 0x01, 0x00, 0x00, 0x44,
	0x0F, 0xB6, 0x8D, 0x8D, 0x01, 0x00, 0x00, 0x0F, 0xB6, 0x9D, 0x98, 0x01, 0x00, 0x00, 0x0F, 0xB6,
	0xBD, 0x99, 0x01, 0x00, 0x00, 0x44, 0x8D, 0x14, 0x09, 0x44, 0x33, 0xD1, 0x0F, 0xB6, 0x8D, 0x87,
	0x01, 0x00, 0x00, 0x44, 0x03, 0xD2, 0x45, 0x03, 0xD2, 0x44, 0x33, 0xD2, 0x8D, 0x14, 0x09, 0x45,
	0x03, 0xD0, 0x33, 0xD1, 0x0F, 0xB6, 0x4D, 0x00, 0x45, 0x03, 0xD2, 0x45, 0x33, 0xD0, 0x44, 0x0F,
	0xB6, 0x45, 0x02, 0x45, 0x03, 0xD1, 0x47, 0x8D, 0x24, 0x12, 0x44, 0x8D, 0x14, 0x09, 0x44, 0x33,
	0xD1, 0x0F, 0xB6, 0x8D, 0x92, 0x01, 0x00, 0x00, 0x45, 0x33, 0xE1, 0x44, 0x0F, 0xB6, 0x4D, 0x03,
	0x45, 0x03, 0xE3, 0x44, 0x0F, 0xB6, 0x9D, 0x97, 0x01, 0x00, 0x00, 0x44, 0x03, 0xE2, 0x0F, 0xB6,
	0x55, 0x01, 0x8D, 0x34, 0x09, 0x33, 0xF1, 0x0F, 0xB6, 0x8D, 0x9A, 0x01, 0x00, 0x00, 0x44, 0x03,
	0xD2, 0x45, 0x03, 0xD2, 0x44, 0x33, 0xD2, 0x0F, 0xB6, 0x95, 0x93, 0x01, 0x00, 0x00, 0x03, 0xF2,
	0x45, 0x03, 0xD0, 0x03, 0xF6, 0x45, 0x03, 0xD2, 0x33, 0xF2, 0x0F, 0xB6, 0x95, 0x9B, 0x01, 0x00,
	0x00, 0x45, 0x33, 0xD0, 0x44, 0x0F, 0xB6, 0x85, 0x94, 0x01, 0x00, 0x00, 0x45, 0x03, 0xD1, 0x41,
	0x03, 0xF0, 0x45, 0x03, 0xD2, 0x03, 0xF6, 0x45, 0x33, 0xD1, 0x44, 0x0F, 0xB6, 0x8D, 0x95, 0x01,
	0x00, 0x00, 0x41, 0x33, 0xF0, 0x44, 0x0F, 0xB6, 0x85, 0x9C, 0x01, 0x00, 0x00, 0x45, 0x03, 0xE2,
	0x44, 0x0F, 0xB6, 0x95, 0x96, 0x01, 0x00, 0x00, 0x41, 0x03, 0xF1, 0x03, 0xF6, 0x41, 0x33, 0xF1,
	0x44, 0x0F, 0xB6, 0x8D, 0x9D, 0x01, 0x00, 0x00, 0x41, 0x03, 0xF2, 0x03, 0xF6, 0x41, 0x33, 0xF2,
	0x44, 0x8D, 0x14, 0x09, 0x41, 0x03, 0xF3, 0x44, 0x33, 0xD1, 0x03, 0xF6, 0x44, 0x03, 0xD2, 0x41,
	0x33, 0xF3, 0x45, 0x03, 0xD2, 0x03, 0xF3, 0x44, 0x33, 0xD2, 0x03, 0xF6, 0x45, 0x03, 0xD0, 0x33,
	0xF3, 0x45, 0x03, 0xD2, 0x03, 0xF7, 0x45, 0x33, 0xD0, 0x03, 0xF6, 0x33, 0xF7, 0x44, 0x03, 0xE6,
	0x45, 0x03, 0xD1, 0x45, 0x03, 0xD2, 0x45, 0x33, 0xD1, 0x4C, 0x8D, 0x4D, 0x05, 0x45, 0x03, 0xE2,
	0x41, 0xBA, 0x81, 0x00, 0x00, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x0F, 0xB6, 0x49, 0xFF, 0x41, 0x0F, 0xB6, 0x11, 0x45, 0x0F, 0xB6, 0x41, 0x01, 0x03, 0xC1,
	0x4D, 0x8D, 0x49, 0x03, 0x03, 0xC0, 0x33, 0xC1, 0x03, 0xC2, 0x03, 0xC0, 0x33, 0xC2, 0x41, 0x03,
	0xC0, 0x03, 0xC0, 0x41, 0x33, 0xC0, 0x49, 0xFF, 0xCA, 0x75, 0xD5, 0x44, 0x0F, 0xB7, 0x9D, 0x88,
	0x01, 0x00, 0x00, 0x41, 0xB8, 0x21, 0xEC, 0xAF, 0xE3, 0x44, 0x02, 0xE0, 0x45, 0x8B, 0xC8, 0x4D,
	0x85, 0xDB, 0x74, 0x67, 0x0F, 0x1F, 0x40, 0x00, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x8B, 0xC9, 0x41, 0x8B, 0xC1, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC1, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC9, 0x41, 0x32, 0x0E, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x16, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC1, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC8, 0x41, 0xD1, 0xC1, 0x41, 0x80, 0xFA, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC9, 0x45, 0x32, 0xD2,
	0x41, 0xFE, 0xC2, 0x49, 0xFF, 0xC6, 0x49, 0xFF, 0xCB, 0x75, 0xA5, 0x49, 0x8B, 0x07, 0xBB, 0x04,
	0x00, 0x00, 0x00, 0x45, 0x8B, 0xC8, 0x80, 0xB0, 0x87, 0x01, 0x00, 0x00, 0x9F, 0x4D, 0x8B, 0x17,
	0x8B, 0xFB, 0x49, 0x81, 0xC2, 0x8A, 0x01, 0x00, 0x00, 0x45, 0x32, 0xDB, 0x0F, 0x1F, 0x40, 0x00,
	0x41, 0x8B, 0xC9, 0x41, 0x8B, 0xC1, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC1, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC9, 0x41, 0x32, 0x0A, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x12, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC1, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC8, 0x41, 0xD1, 0xC1, 0x41, 0x80, 0xFB, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC9, 0x45, 0x32, 0xDB,
	0x41, 0xFE, 0xC3, 0x49, 0xFF, 0xC2, 0x48, 0xFF, 0xCF, 0x75, 0xA5, 0x4D, 0x8B, 0x1F, 0x45, 0x8B,
	0xC8, 0x45, 0x32, 0xD2, 0x48, 0x8B, 0xFB, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x8B, 0xC9, 0x41, 0x8B, 0xC1, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC1, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC9, 0x41, 0x32, 0x0B, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x13, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC1, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC8, 0x41, 0xD1, 0xC1, 0x41, 0x80, 0xFA, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC9, 0x45, 0x32, 0xD2,
	0x41, 0xFE, 0xC2, 0x49, 0xFF, 0xC3, 0x48, 0xFF, 0xCF, 0x75, 0xA5, 0x4D, 0x8B, 0x17, 0x45, 0x8B,
	0xC8, 0xBF, 0x08, 0x00, 0x00, 0x00, 0x49, 0x81, 0xC2, 0x92, 0x01, 0x00, 0x00, 0x45, 0x32, 0xDB,
	0x41, 0x8B, 0xC9, 0x41, 0x8B, 0xC1, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC1, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC9, 0x41, 0x32, 0x0A, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x12, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC1, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC8, 0x41, 0xD1, 0xC1, 0x41, 0x80, 0xFB, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC9, 0x45, 0x32, 0xDB,
	0x41, 0xFE, 0xC3, 0x49, 0xFF, 0xC2, 0x48, 0xFF, 0xCF, 0x75, 0xA5, 0x4D, 0x8B, 0x17, 0x45, 0x8B,
	0xC8, 0x49, 0x81, 0xC2, 0x9A, 0x01, 0x00, 0x00, 0x45, 0x32, 0xDB, 0x0F, 0x1F, 0x44, 0x00, 0x00,
	0x41, 0x8B, 0xC9, 0x41, 0x8B, 0xC1, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC1, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC9, 0x41, 0x32, 0x0A, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x12, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC1, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC8, 0x41, 0xD1, 0xC1, 0x41, 0x80, 0xFB, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC9, 0x45, 0x32, 0xDB,
	0x41, 0xFE, 0xC3, 0x49, 0xFF, 0xC2, 0x48, 0xFF, 0xCB, 0x75, 0xA5, 0x4D, 0x8B, 0x0F, 0x41, 0xBB,
	0x83, 0x01, 0x00, 0x00, 0x49, 0x83, 0xC1, 0x04, 0x45, 0x32, 0xD2, 0x0F, 0x1F, 0x44, 0x00, 0x00,
	0x41, 0x8B, 0xC8, 0x41, 0x8B, 0xC0, 0xC1, 0xE8, 0x10, 0xC1, 0xE9, 0x18, 0x02, 0xC8, 0x41, 0x8B,
	0xC0, 0xC1, 0xE8, 0x08, 0x02, 0xC8, 0x41, 0x02, 0xC8, 0x41, 0x32, 0x09, 0x0F, 0xB6, 0xD1, 0x0F,
	0xB6, 0xC2, 0x41, 0x88, 0x11, 0x24, 0x1F, 0x0F, 0xB6, 0xC8, 0x8B, 0xC2, 0xC1, 0xE0, 0x08, 0x41,
	0xD3, 0xC0, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0xC1, 0xE0, 0x08, 0x0B, 0xC2, 0x44, 0x03,
	0xC0, 0x41, 0xD1, 0xC0, 0x41, 0x80, 0xFA, 0x10, 0x76, 0x06, 0x45, 0x03, 0xC0, 0x45, 0x32, 0xD2,
	0x41, 0xFE, 0xC2, 0x49, 0xFF, 0xC1, 0x49, 0xFF, 0xCB, 0x75, 0xA5, 0x49, 0x8B, 0x07, 0x44, 0x89,
	0xA8, 0x8E, 0x01, 0x00, 0x00, 0x49, 0x8B, 0x07, 0x66, 0x83, 0xB8, 0x45, 0x01, 0x00, 0x00, 0x01,
	0x75, 0x04, 0x44, 0x30, 0x60, 0x05, 0x49, 0x8B, 0x0F, 0x66, 0x83, 0xB9, 0x45, 0x01, 0x00, 0x00,
	0x02, 0x75, 0x08, 0x41, 0x0F, 0xB6, 0xC4, 0x66, 0x31, 0x41, 0x05, 0x49, 0x8B, 0x0F, 0x66, 0x83,
	0xB9, 0x45, 0x01, 0x00, 0x00, 0x04, 0x75, 0x07, 0x41, 0x0F, 0xB6, 0xC4, 0x31, 0x41, 0x05, 0x49,
	0x8B, 0x0F, 0x66, 0x83, 0xB9, 0x45, 0x01, 0x00, 0x00, 0x08, 0x75, 0x08, 0x41, 0x0F, 0xB6, 0xC4,
	0x48, 0x31, 0x41, 0x05, 0x48, 0x8B, 0x5C, 0x24, 0x28, 0x48, 0x8B, 0x6C, 0x24, 0x30, 0x48, 0x8B,
	0x74, 0x24, 0x38, 0x48, 0x8B, 0x7C, 0x24, 0x40, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C,
	0xC3
};

struct decrypted_dfp_info
{
	unsigned char *buf;
	size_t buf_size;
	__int64 unknown;
};

using decrypt_dfp_info_t = void(*)(decrypted_dfp_info *out, void *buf, size_t buf_size);
decrypt_dfp_info_t decrypt_dfp_info = (decrypt_dfp_info_t)(&decrypt_dfp_info_data);

int main(const int argc, const char *argv[])
{
	if (argc < 2)
	{
		std::cout << "Usage: " << argv[0] << " <encrypted file path>" << std::endl;
		return 0;
	}

	std::ifstream in_file(argv[1], std::ios::binary);
	
	if (!in_file)
	{
		std::cerr << "Failed to open input file \"" << argv[1] << "\"" << std::endl;
		return 0;
	}

	char magic[32];
	in_file.seekg(-32, std::ios::end);
	in_file.read(magic, 32);

	if (memcmp(magic, "mcnxyxcmvmcxyxcmskdldkjshagsdhfj", 32) != 0)
	{
		std::cerr << "Not a supported DFP encrypted file." << std::endl;
	}

	// DFP info size is stored right before magic string
	int dfp_info_size;
	in_file.seekg(-36, std::ios::end);
	in_file.read((char*)(&dfp_info_size), 4);

	const auto dfp_info = std::make_unique<char[]>(dfp_info_size);
	in_file.seekg(-dfp_info_size, std::ios::end);
	in_file.read(dfp_info.get(), dfp_info_size);

	// Make the code executable
	DWORD old_protect;
	VirtualProtect(decrypt_dfp_info_data, sizeof(decrypt_dfp_info_data), PAGE_EXECUTE_READWRITE, &old_protect);

	decrypted_dfp_info dec_dfp_info;
	decrypt_dfp_info(&dec_dfp_info, dfp_info.get(), dfp_info_size);

	// The size of the data to be decrypted
	const auto data_size = *(size_t*)(dec_dfp_info.buf + 0x192);
	
	// 0, 1, and 2 are valid, but MvCI seems to only use 2
	const auto mode = dec_dfp_info.buf[4];
	if (mode != 2)
	{
		std::cerr << "DFP decryption mode " << mode << " not supported" << std::endl;
		return 0;
	}

	char in_data[1024];
	char out_data[1024];

	const auto out_path = std::string(argv[1]) + ".decrypted";
	std::ofstream out_file(std::string(argv[1]) + ".decrypted", std::ios::binary);

	if (!out_file)
	{
		std::cerr << "Failed to open output file \"" << out_path << "\"" << std::endl;
		return 0;
	}

	in_file.seekg(0, std::ios::beg);

	auto remaining = data_size;
	auto offset = (size_t)(0);

	const auto key = dec_dfp_info.buf[5];
	auto xor_val = key;

	while (remaining > 0)
	{
		// Decrypt 1024 bytes at a time
		auto block_size = remaining < 1024 ? remaining : 1024;
		in_file.read(in_data, block_size);

		for (auto i = 0; i < block_size; i++)
		{
			out_data[i] = in_data[i] ^ xor_val;
			xor_val = (in_data[i] ^ key) - ((offset + i) & 0xFF);
		}

		out_file.write(out_data, block_size);
		offset += block_size;
		remaining -= block_size;

		// Print progress
		if ((remaining * 100 / data_size) < ((remaining + block_size) * 100 / data_size))
			std::cout << 100 - (remaining * 100 / data_size) << "%" << std::endl;
	}

	return 0;
}